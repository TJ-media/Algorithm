# -*- coding: utf-8 -*-
"""DP_최장회문부수열.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lZL-4y83tx2pDrE-O2aqTSPopFSi0Zu9
"""

x = input()
y = x[::-1]

n = len(x)
LPS = [[0]*(n+1) for row in range(n+1)]

for i in range(0,-n+1):
	LPS[i][0] = 0
for j in range(0, n+1):
	LPS[0][j] = 0

for i in range(1, n+1):
	for j in range(1, n+1):
		if x[i-1] == y[j-1]:
			LPS[i][j] = LPS[i-1][j-1] + 1
		else:
			LPS[i][j] = max(LPS[i-1][j], LPS[i][j-1])
print(LPS[n][n])


# input 받은 문자열을 x에 저장하고 y에는 x의 문자열을 거꾸로 저장한다.
# 그 다음 x와 y의 LCS를 구하면 최장회문부수열(LPS)를 구할 수 있다.
# size가 n인 문자열에 대해 n x n의 DP테이블(list LPS)을 모두 채운뒤 LPS[n][n]의 값을 출력하면 되므로 O(n^2)의 수행시간을 갖는다.